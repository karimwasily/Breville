#
# This is the default publish farm definition for the dispatcher module.
#
# DO NOT EDIT this file, your changes will have no impact on your deployment.
#
# Instead create a copy in the folder conf.dispatcher.d/available_farms and edit the copy.
# Finally, change to the directory conf.dispatcher.d/enabled_farms, remove the symbolic
# link for default_farm.any and create a symbolic link to your copy.
#

/publishfarm {
	# client headers which should be passed through to the render instances
	# (feature supported since dispatcher build 2.6.3.5222)
	/clientheaders {
		$include "../clientheaders/clientheaders.any"
	}
	# hostname globbing for farm selection (virtual domain addressing)
	/virtualhosts {
		$include "../virtualhosts/virtualhosts.any"
	}
	# the load will be balanced among these render instances
	/renders {
		$include "../renders/default_renders.any"
	}
	# only handle the requests in the following acl. default is 'none'
	# the glob pattern is matched against the first request line
	/filter {

	$include "../filters/filters.any"
	
	# Allow non-public content directories
	/0022 { /type "allow" /url "/bin/breville/*"    } # to allow servlet for customer form
	/0023 { /type "allow" /method "GET" /url "/content*" }  # disable this rule to allow mapped content only
	/0024 { /type "allow" /url "/bin/xfaforms/submitaction*" } # to enable AEM Forms submission

	# Enable dynamic media
	/0040 { /type "allow" /url "/is/image*"   }
	/0041 { /type "allow" /url "/is/content*"   }

	# Enable features
	/0042 { /type "allow" /method "POST" /url "/content/[.]*.form.html" }  # allow POSTs to form selectors under content
	/0043 { /type "allow" /method "POST" /url "/content/[.]*.commerce.cart.json" }  # allow POSTs to update the shopping cart

	# Allow required paths for Breville
	/0065 { /type "allow" /url "/etc/designs/*" }
	/0066 { /type "allow" /url "/etc/clientlibs/*" }
	/0067 { /type "allow" /url "/libs/cq/personalization/components/clickstreamcloud/content/config.json" }
	/0068 { /type "allow" /url "/libs/cq/security/userinfo.json" }
	/0069 { /type "allow" /url "/libs/granite/security/currentuser.json" }
	/0070 { /type "allow" /url "/libs/cq/i18n/*" }
	/0071 { /type "allow" /url "/etc/segmentation.segment.js" }
	/0077 { /type "allow" /url "/libs/granite/csrf/token.json*" }
	/0078 { /type "allow" /url "/etc/acs-commons/lists/CountiresAndStates*.json" }  # allowing acs-commons path.

    # Video files allow
    /0057 { /type "allow" /url "*.mp4"   }  # enable mp4
    /0060 { /type "allow" /url "*.ogv"   }  # enable ogv
    /0061 { /type "allow" /url "*.webm"  }  # enable webm

	# Allow components JSON model
	/0101 { /type "allow" /extension "json" /selectors "model" /path "/content/*" }

	# Allow manifest.webmanifest files located in the content
	/0102 { /type "allow" /extension "webmanifest" /path "/content/*/manifest" }
	/0201 { /type "allow" /method "GET" /path "/content/*" /selectors '[0-9-]+' /extension "html" }
	/0203 { /type "allow" /method "GET" /path "/conf/*" /extension "svg" }
	/0204 { /type "allow" /method "GET" /path "/content/*" /selectors '[0-9-]+' /extension "mp4" }
	/0088 { /type "allow" /method "GET" /extension 'json' /selectors "1" }  # allow one-level json requests
	/0089 { /type "allow" /url "/bin/breville*.*([0-9]|[A-Z]).json*"   }
	/0090 { /type "allow" /url "/bin/beans*.*([0-9]|[A-Z]).json*"  }
	
	}

	# if the package is installed on publishers to generate a list of all content with a vanityurl attached
	# this section will auto-allow the items to bypass the normal dispatcher filters
	# Reference: https://docs.adobe.com/docs/en/dispatcher/disp-config.html#Enabling%20Access%20to%20Vanity%20URLs%20-%20/vanity_urls
	 /vanity_urls {
		/url    "/libs/granite/dispatcher/content/vanityUrls.html"
		/file   "/tmp/vanity_urls"
		/delay  300
	 }
	# allow propagation of replication posts (should seldomly be used)
	/propagateSyndPost "0"
	# the cache is used to store requests from the renders for faster delivery
	# for a second time.
	/cache {
		# The cacheroot must be equal to the document root of the webserver
		/docroot "${DOCROOT}"
		# sets the level upto which files named ".stat" will be created in the
		# document root of the webserver. when an activation request for some
		# handle is received, only files within the same subtree are affected
		# by the invalidation.
		/statfileslevel "2"
		# caches also authorized data
		/allowAuthorized "0"
		# Flag indicating whether the dispatcher should serve stale content if
		# no remote server is available.
		/serveStaleOnError "1"
		# the rules define, which pages should be cached. please note that
		# - only GET requests are cached
		# - only requests with an extension are cached
		# - only requests without query parameters ( ? ) are cached
		# - only unauthorized pages are cached unless allowUnauthorized is set to 1
		/rules {
			$include "../cache/rules.any"
		
		/0001 { /glob "/content/*.html" /type "allow" }
		/0002 { /glob "/content/*.jpg" /type "allow" }
		/0003 { /glob "/content/*.jpeg" /type "allow" }
		/0004 { /glob "/content/*.png" /type "allow" }
		/0005 { /glob "/content/*.mp4" /type "allow" }
		/0006 { /glob "/content/*.avi" /type "allow" }
		/0007 { /glob "/content/*.mov" /type "allow" }
		/0008 { /glob "/content/*.wmv" /type "allow" }
		/0009 { /glob "/content/*.mp3" /type "allow" }
		/0010 { /glob "/content/*.svg" /type "allow" }
		/0011 { /glob "/content/*.gif" /type "allow" }

		/0020 { /glob "/etc/*.css" /type "allow" }
		/0021 { /glob "/etc/*.js" /type "allow" }
		/0022 { /glob "/etc/*.woff" /type "allow" }
		/0023 { /glob "/etc/*.eot" /type "allow" }
		/0024 { /glob "/etc/*.ttf" /type "allow" }

		/0040 { /glob "/libs/granite/security/currentuser.json" /type "deny" }
		/0041 { /glob "/libs/granite/csrf/token.json" /type "deny" }

		/0100 { /glob "/libs/granite/dispatcher/content/vanityUrls.html" /type "deny" }

	}
		# the invalidate section defines those pages which are 'invalidated' after
		# any activation. please note that, the activated page itself and all
		# related documents are flushed on an modification. for example: if the
		# page /foo/bar is activated, all /foo/bar.* files are removed from the
		# cache.
		/invalidate {
			/0000 {
				/glob "*"
				/type "deny"
			}
			/0001 {
				/glob "*.html"
				/type "allow"
			}
		}
		/allowedClients {
			$include "../cache/default_invalidate.any"
		}
		# The ignoreUrlParams section contains query string parameter names that
		# should be ignored when determining whether some request's output can be
		# cached or delivered from cache.
		# In this example configuration, the "q" parameter will be ignored.
		# /ignoreUrlParams {
		#	/0001 { /glob "*" /type "deny" }
		#	/0002 { /glob "q" /type "allow" }
		# }

		# Cache response headers next to a cached file. On the first request to
		# an uncached resource, all headers matching one of the values found here
		# are stored in a separate file, next to the cache file. On subsequent
		# requests to the cached resource, the stored headers are added to the
		# response.
		# Note, that file globbing characters are not allowed here.
		/headers {
			"Cache-Control"
			"Content-Disposition"
			"Content-Type"
			"Expires"
			"Last-Modified"
			"X-Content-Type-Options"
		}
		# A grace period defines the number of seconds a stale, auto-invalidated
		# resource may still be served from the cache after the last activation
		# occurring. Auto-invalidated resources are invalidated by any activation,
		# when their path matches the /invalidate section above. This setting
		# can be used in a setup, where a batch of activations would otherwise
		# repeatedly invalidate the entire cache.
		/gracePeriod "2"

		# Enable TTL evaluates the response headers from the backend, and if they
		# contain a Cache-Control max-age or Expires date, an auxiliary, empty file
		# next to the cache file is created, with modification time equal to the
		# expiry date. When the cache file is requested past the modification time
		# it is automatically re-requested from the backend.
		/enableTTL "1"
	}
}

